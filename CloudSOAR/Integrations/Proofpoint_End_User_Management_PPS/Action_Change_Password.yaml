integration: Proofpoint End User Management [PPS]
name: Change Password
type: Containment
script:
  code: |
    import sys
    import requests
    import argparse
    import urllib3
    import json
    import base64
    import os
    from requests.auth import HTTPBasicAuth

    urllib3.disable_warnings(urllib3.exceptions.InsecurePlatformWarning)
    urllib3.disable_warnings(urllib3.exceptions.SNIMissingWarning)
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


    class EnvDefault(argparse.Action):
        def __init__(self, required=True, default=None, **kwargs):
            envvar = kwargs.get("dest")
            default = os.environ.get(envvar, default) if envvar in os.environ else default
            required = False if required and default else required
            super(EnvDefault, self).__init__(default=default, required=required, **kwargs)

        def __call__(self, parser, namespace, values, option_string=None):
            setattr(namespace, self.dest, values)


    try:
        parser = argparse.ArgumentParser()
        parser.add_argument('--url', help='URL , REQUIRED', required=True, action=EnvDefault)
        parser.add_argument('--username', help='username, REQUIRED', required=True, action=EnvDefault)
        parser.add_argument('--password', help='password, REQUIRED', required=True, action=EnvDefault)
        parser.add_argument('--timeout', help='timeout , REQUIRED', required=False, action=EnvDefault)
        parser.add_argument('--verify', help='verify', required=False, action=EnvDefault)
        parser.add_argument('--proxy_url', help='Proxy URL', required=False, action=EnvDefault)

        parser.add_argument('--user', help='user', required=False, action=EnvDefault)
        args, unknown = parser.parse_known_args()
        proxies = {"http": args.proxy_url, "https": args.proxy_url} if args.proxy_url is not None else None
        try:
            timeout = args.timeout
        except (ValueError, TypeError):
            timeout = 180.0
        verify = args.verify == "true"
        session = requests.Session()
        host = str(args.url).replace("https://","").rstrip("/")
        hostPort = host + ":10000"
        urlNoSlash = str(args.url).rstrip("/")
        urlNoSlashPort = urlNoSlash + ":10000"
        endpoint = "{0}/rest/v1/enduser/{1}".format(urlNoSlashPort, args.user)
        headers = {
            "Host": hostPort,
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36",
            "Content-type": "application/json",
            "Accept": "application/json"
        }
        params = {
            "resetpassword" : "1"
        }
        response = session.put(endpoint, auth=(str(args.username), str(args.password)), headers=headers, params=params, proxies=proxies, verify=verify, timeout=timeout)
        response.raise_for_status()
        print(json.dumps(response.json()))
        exit(0)
    except Exception as e:
        err = str(e)
        try:
            if hasattr(e, "response"):
                try:
                    response = e.response.json()
                    message = response.get("message", "")
                    if message != "":
                        err = "API Error: {}".format(message)
                except ValueError:
                    err = "API Error: {}".format(str(e.response.text))
        except AttributeError:
            err = str(e)
        sys.stderr.write(str(err))
        exit(-1)
fields:
- id: user
  label: UID or Email
  type: text
  required: true
  incident_artifacts: true
output:
- path: '[].email'
  type: text
- path: '[].firstname'
  type: text
- path: '[].lastname'
  type: text
- path: '[].lastmodified'
  type: text
- path: '[].groups'
  type: text
- path: '[].uid'
  type: text
table_view:
- display_name: Firstname
  value: '[].firstname'
- display_name: Lastname
  value: '[].lastname'
- display_name: Lastmodified
  value: '[].lastmodified'