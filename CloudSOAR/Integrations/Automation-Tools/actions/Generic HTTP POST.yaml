integration: Automation Tools
name: Generic HTTP POST
type: Notification
script:
  code: |
    import os
    import sys
    import json
    import html
    import urllib3
    import argparse
    import requests
    import unicodedata
    from bs4 import BeautifulSoup

    # disabling all urllib3 warnings.
    urllib3.disable_warnings()

    class EnvDefault(argparse.Action):
        def __init__(self, required=True, default=None, **kwargs):
            envvar = kwargs.get("dest")
            default = os.environ.get(envvar, default) if envvar in os.environ else default
            required = False if required and default else required
            super(EnvDefault, self).__init__(default=default, required=required, **kwargs)

        def __call__(self, parser, namespace, values, option_string=None):
            setattr(namespace, self.dest, values)

    def send_request(
            endpoint_url,
            username=None,
            password=None,
            request_method="post",
            request_json=None,
            request_data=None,
            request_headers=None,
            request_timeout=None,
            request_verify=None,
            request_proxies=None
    ):
        """ Prepares all the parameters of Request and sends it.

        :param endpoint_url: URL for the new Request.
        :param username: username for the Request.
        :param password: password for the Request.
        :param request_method: method for the Request.
        :param request_json: (optional) json to send in the body of the Request
        :param request_data: (optional) Dictionary, list of tuples, bytes, or file-like object to send in the body of the Request
        :param request_headers: (optional) Dictionary of HTTP Headers to send with the Request
        :param request_timeout: (optional) How long to wait for the server to send data before giving up, as a float
        :param request_verify: (optional) Either a boolean, in which case it controls whether we verify the server's TLS certificate
        :param request_proxies: (optional) Dictionary mapping protocol or protocol and hostname to the URL of the proxy.
        :rtype: requests.Response
        """

        headers = {}
        if is_value_exist(request_headers):
            request_headers = html.unescape(str(request_headers).strip())
            request_headers = unicodedata.normalize("NFKD", request_headers).encode("utf-8").decode("utf-8")
            request_headers = BeautifulSoup(request_headers, "html.parser").text
            request_headers = request_headers.replace('\u200b', '')
            for header_string in str(request_headers).split(","):
                header_string = str(header_string).strip()
                if header_string != "":
                    header_key_value = header_string.split(":")
                    if len(header_key_value) > 1:
                        headers.update({
                            # update headers as key: value (dict)
                            str(header_key_value[0].strip()): str(header_key_value[1].strip())
                        })

        request_args = {
            'json': request_json,
            'data': request_data,
            'headers': headers,
            'timeout': request_timeout,
            'verify': request_verify,
            'proxies': request_proxies,
        }
        if is_value_exist(username) and is_value_exist(password):
            request_args.update({
                # Auth tuple or callable to enable Basic/Digest/Custom HTTP Auth.
                "auth": (username, password)
            })
        session = requests.Session()
        responses = getattr(session, request_method)(endpoint_url, **request_args)
        responses.raise_for_status()
        return responses

    def is_value_exist(field_value):
        return True if field_value is not None and field_value != '' and field_value != "None" else False

    try:

        parsers = argparse.ArgumentParser()
        parsers.add_argument('--api_url', help='api_url, REQUIRED', required=True, action=EnvDefault)
        parsers.add_argument('--username', help='username', required=False, action=EnvDefault)
        parsers.add_argument('--password', help='password', required=False, action=EnvDefault)
        parsers.add_argument('--headers', help='headers', required=False, action=EnvDefault)
        parsers.add_argument('--timeout', help='timeout', required=False, default=180, action=EnvDefault)
        parsers.add_argument('--verify', help='verify', required=False, action=EnvDefault)
        parsers.add_argument('--proxy_url', help='proxy_url', required=False, action=EnvDefault)

        parsers.add_argument('--jsonData', help='JSON Data', required=False, action=EnvDefault)
        parsers.add_argument('--formData', help='Form Data', required=False, action=EnvDefault)
        parsers.add_argument('--jsonOutput', help='JSON Output', required=False, action=EnvDefault)
        args, unknown = parsers.parse_known_args()
        proxies = {'http': args.proxy_url, 'https': args.proxy_url} if args.proxy_url is not None else None
        try:
            timeout = float(args.timeout)
        except (ValueError, TypeError):
            timeout = 180.0
        verify = args.verify == "true"
        if is_value_exist(args.jsonData) and is_value_exist(args.jsonOutput):
            raise Exception("only one field JSON or Output.raw should will be set not both")
        if not is_value_exist(args.jsonData) and not is_value_exist(args.jsonOutput) and not is_value_exist(args.formData):
            raise Exception("At lease one field JSON or Output.raw or Form-Data should will be set")
        json_data = {}
        if is_value_exist(args.jsonOutput):
            try:
                with open(args.jsonOutput) as json_file:
                    json_data = json.load(json_file)
                #json_data = json.dumps(args.jsonOutput)
                # with open(args.jsonOutput) as json_file:
                #     json_message = json.load(json_file)
                #     root_message = json_message.get("message", {})
                #     if len(root_message) > 0 and root_message is not None:
                #         json_message = root_message
                    
            except ValueError as e:
                raise Exception("Output parameter JSON is invalid({})".format(str(e)))
        if is_value_exist(args.jsonData):
            try:
                json_data = html.unescape(str(args.jsonData).strip())
                json_data = unicodedata.normalize("NFKD", json_data).encode("utf-8").decode("utf-8")
                json_data = BeautifulSoup(json_data, "html.parser").text
                json_data = json_data.replace('\u200b', '')
                json_data = json.loads(str(json_data).strip(), strict=False)
            #except ValueError as e:
            except Exception as e:
                raise Exception("Invalid JSON Provided ({})".format(str(e)))
        form_data = None
        if is_value_exist(args.formData):
            form_data = html.unescape(str(args.formData).strip())
            form_data = unicodedata.normalize("NFKD", form_data).encode("utf-8").decode("utf-8")
            form_data = BeautifulSoup(form_data, "html.parser").text
            form_data = form_data.replace('\u200b', '')
            try:
                form_data = json.loads(str(form_data).strip(), strict=False)
            except Exception as e:
                if "=" in form_data:
                    form_data = str(form_data).strip()
                else:
                    raise Exception("Invalid Form Data, it should be pass like this: query=test&type=test")
        results = send_request(
            endpoint_url=str(args.api_url).strip(),
            username=args.username,
            password=args.password,
            request_json=json_data,
            request_data=form_data,
            request_headers=args.headers,
            request_timeout=timeout,
            request_verify=verify,
            request_proxies=proxies
        )
        try:
            # in case some Post Request doesn't return any JSON
            results = results.json()
        except ValueError:
            results = {"status": "done"}
        print(json.dumps(results))
        #print(json.dumps(json_data))
        exit(0)
    except Exception as e:
        err = str(e)
        try:
            if hasattr(e, "response"):
                try:
                    response = e.response.json()
                    err = "API Error: {}".format(str(response))
                except ValueError:
                    err = str(e)
        except AttributeError:
            err = str(e)
        sys.stderr.write(str(err))
        exit(-1)
fields:
- id: api_url
  label: API URL
  type: text
  required: true
  hint: e.g. the Sumo HTTP endpoint URL
- id: jsonData
  label: Request Body as JSON
  type: textarea
  required: false
  hint: HTTP POST Request body, only accepted valid JSON (set only this field or "Request
    Body (Raw Output JSON)" but not both)
- id: jsonOutput
  label: Request Body (output.raw JSON)
  type: text
  required: false
  hint: Use only output.raw as Output/JSON of the Insight action, The Body As JSON
    you want to send in the POST (set only this field or "Request Body as JSON" but
    not both)
- id: formData
  label: Request Body as Form-Data
  type: textarea
  required: false
  hint: 'HTTP POST Request body, accept valid JSON as Form-Data or directly Form-Data,
    For Example: query=test&type=test'

signature: 'f68e372e47bb458ed06c6ef1ca6aa775d1b11ba91e57e7ec0c8a4b9bbef4213545c15fbd5d8e9671002795198be04e40ae8e3c6af1f59abdf71e1fc90e08178f'