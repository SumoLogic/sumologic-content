integration: 'Automation Tools'
name: 'Build String Object'
type: Custom
script:
 code: |
    import json
    import argparse
    import os
    import sys
    
    class EnvDefault(argparse.Action):
            def __init__(self, required=True, default=None, **kwargs):
                envvar = kwargs.get("dest")
                default = os.environ.get(envvar, default) if envvar in os.environ else default
                required = False if required and default else required
                super(EnvDefault, self).__init__(default=default, required=required, **kwargs)

            def __call__(self, parser, namespace, values, option_string=None):
                setattr(namespace, self.dest, values)

    def create_json_output(input_string):
        # Create a dictionary with the input string
        data = {"input": input_string}
        
        # Convert the dictionary to a JSON-formatted string
        json_output = json.dumps(data, indent=2)
        
        return json_output

    def main():
        json_dict = {}
        # Create an argument parser
        parser = argparse.ArgumentParser()
        parser.add_argument('--input_string', help='Input String', required=False, action=EnvDefault)

        # Add an argument for the input string

        # Parse the command-line arguments
        args, unknown = parser.parse_known_args()

        try:
            # Get input from the command-line argument
            user_input = args.input_string

            # Generate JSON output
            json_dict['message'] = str(user_input)

            # Print the JSON output
            print(json.dumps(json_dict))

        except ValueError as e:
            err = str(e)
            sys.stderr.write(str(e))
            exit(-1)

    if __name__ == "__main__":
        main()
fields:
  - id: input_string
    label: 'Message String to Build'
    type: textarea
    required: true
output:
  - path: 'message'
    type: text