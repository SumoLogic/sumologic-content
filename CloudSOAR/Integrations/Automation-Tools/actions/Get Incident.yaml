integration: 'Automation Tools'
name: 'Get Incident'
type: Enrichment
script:
    code: |
        import os
        import json
        import argparse
        import requests
        import sys
        import urllib3
        
        # disabling all urllib3 warnings.
        urllib3.disable_warnings()
        
        class EnvDefault(argparse.Action):
            def __init__(self, required=True, default=None, **kwargs):
                envvar = kwargs.get("dest")
                default = os.environ.get(envvar, default) if envvar in os.environ else default
                required = False if required and default else required
                super(EnvDefault, self).__init__(default=default, required=required, **kwargs)

            def __call__(self, parser, namespace, values, option_string=None):
                setattr(namespace, self.dest, values)
        
        try:
            parser = argparse.ArgumentParser()
            parser.add_argument('--token', help='JWT token', required=False, action=EnvDefault)
            parser.add_argument('--access_id', help='Access ID', required=False, action=EnvDefault)
            parser.add_argument('--access_key', help='Access Key', required=False, action=EnvDefault)
            parser.add_argument('--cloud_soar_url', help='IncMan URL , REQUIRED', required=True, action=EnvDefault)
            parser.add_argument('--incidentId', help='Incident Id', required=False, action=EnvDefault)
            parser.add_argument('--IncmanParamIncidentId', help='Incident ID', required=False, action=EnvDefault)
            args, unknown = parser.parse_known_args()
        
            # Get the incident id, if empty current incident id will be used
            incidentID = args.IncmanParamIncidentId
            if args.incidentId is not None and args.incidentId != '':
                incidentID = args.incidentId
            if incidentID is None or incidentID == '' or int(incidentID) <= 0:
                raise Exception('Please specify a valid Cloud SOAR Incident ID')
            
            # delivery 2 endpoint & headers
            if args.access_id and args.access_key:
                api_path = "/api/csoar/v3"
                headers = {
                  'Content-Type': 'application/json',
                  'Accept': 'application/json'
                }
            # legacy endpoint & headers
            elif args.token:
                api_path = "/api/v3"
                headers = {
                  'Accept': 'application/json;charset=UTF-8',
                  'Content-Type': 'application/x-www-form-urlencoded',
                  'Authorization': 'Bearer {}'.format(args.token)
                }
            else:
                raise Exception("Access ID and Access Key, or legacy API token are required for authentication")
            
            get_incident = '{0}{1}/incidents/{2}/'.format(args.cloud_soar_url.rstrip('/'), api_path, incidentID)
            session = requests.Session()
            session.verify = False
            
            res = {}
            response = session.get(get_incident, headers=headers, auth=(args.access_id, args.access_key) if args.access_id and args.access_key else None, timeout=30)
            response.raise_for_status()
            data = response.json()
            
            # flattens the incident JSON (removes 'name' and 'value' keys)
            inc_data = {}
            for content in data:
                if isinstance(data[content], dict):
                    for key, value in data[content].items():
                        if key == "value":
                            inc_data[content] = value
                elif isinstance(content, str):
                    inc_data[content] = data[content]
            res["incident_data"] = inc_data

            # fetch list of external alerts
            get_ext_alert_list = '{0}{1}/incidents/{2}/external_alerts/'.format(args.cloud_soar_url.rstrip('/'), api_path, incidentID)
            response = session.get(get_ext_alert_list, headers=headers, timeout=15)
            response.raise_for_status()
            alert_res = response.json()
            if alert_res == []:
                res["external_alert"] = {}
                pass
            else:
                alert_id = alert_res[0]["id"]
                alert_type = alert_res[0]["type"]
    
                # fetch external alert(s) details
                get_ext_alert = '{0}{1}/incidents/{2}/external_alerts/{3}/?type={4}'.format(args.cloud_soar_url.rstrip('/'), api_path, incidentID, alert_id, alert_type)
                response = session.get(get_ext_alert, headers=headers, timeout=15)
                res["external_alert"] = response.json()
        
            print(json.dumps(res))
            exit(0)
        
        except Exception as e:
            err = str(e)
            try:
                if hasattr(e, "response"):
                    try:
                        response = e.response.json()
                        msg_error = response.get("error", None)
                        if msg_error is not None:
                            msg_description = response.get("description", "")
                            err = "IncMan API Error: {} {} ".format(str(msg_error), str(msg_description))
                    except ValueError:
                        err = str(e)
            except AttributeError:
                err = str(e)
            sys.stderr.write(str(err))
            exit(-1)

fields:
  - id: incidentId
    label: 'Incident ID'
    type: text
    required: false
    hint: "Incident ID (if empty the current incident ID will be used)"
    validator: integer
output:
  - path: incident_data.id
    type: text
    example: '8508'
  - path: incident_data.additional_info
    type: text
    example: 'Exfiltration, Unknown/Other'
  - path: incident_data.endtime
    type: text
    example: '12-31-1969 06:00 PM'
  - path: incident_data.openingtime
    type: text
    example: '09-08-2023 07:15 AM'
  - path: incident_data.incident_category
    type: text
    example: 'General'
  - path: incident_data.incident_kind
    type: text
    example: 'Incident response'
  - path: incident_data.purpose
    type: text
    example: 'Investigation'
  - path: incident_data.incidentid
    type: text
    example: 'INSIGHT-26022'
  - path: incident_data.description
    type: text
    example: 'Exfiltration'
  - path: incident_data.type.[]
    type: text
    example: 'CSE'
  - path: incident_data.tags.[]
    type: text
    example: 'workstation'
  - path: incident_data.restriction
    type: text
    example: 'LOW'
  - path: incident_data.timezone
    type: text
    example: 'GMT +0.00 Coordinated Universal Time, Greenwich Mean Time'
  - path: incident_data.closingtime
    type: text
    example: '12-31-1969 06:00 PM'
  - path: incident_data.inhibit_phases
    type: text
    example: 'false'
  - path: incident_data.status
    type: text
    example: 'Identification'
  - path: incident_data.starttime
    type: text
    example: '09-08-2023 07:07 AM'
  - path: incident_data.is_deleted
    type: text
    example: 'false'
  - path: incident_data.owner
    type: text
    example: 'Admins (group)'
  - path: incident_data.folder
    type: text
    example: 'CSE-Pending'
  - path: incident_data.created_by
    type: text
    example: 'AUTOMATION ENGINE'
  - path: incident_data.generated_by
    type: text
    example: '#incident|8508|OIFDaemon|dynamicSumoLogicInsightsDaemon'
  - path: external_alert.name
    type: text
    example: 'Sumo Logic CSE Insights'
  - path: external_alert.actions
    type: text
    example: 'Create incident from template'
  - path: external_alert.result.[]
    type: text
  - path: incident_data.opt_1
    type: text
  - path: incident_data.opt_2
    type: text
  - path: incident_data.opt_3
    type: text
  - path: incident_data.opt_4
    type: text
  - path: incident_data.opt_5
    type: text
  - path: incident_data.opt_6
    type: text
  - path: incident_data.opt_7
    type: text
  - path: incident_data.opt_8
    type: text
  - path: incident_data.opt_9
    type: text
  - path: incident_data.opt_10
    type: text
  - path: incident_data.opt_11
    type: text
  - path: incident_data.opt_12
    type: text
  - path: incident_data.opt_13
    type: text
  - path: incident_data.opt_14
    type: text
  - path: incident_data.opt_15
    type: text
  - path: incident_data.opt_16
    type: text
  - path: incident_data.opt_17
    type: text
  - path: incident_data.opt_18
    type: text
  - path: incident_data.opt_19
    type: text
  - path: incident_data.opt_20
    type: text
  - path: incident_data.opt_21
    type: text
  - path: incident_data.opt_22
    type: text
  - path: incident_data.opt_23
    type: text
  - path: incident_data.opt_24
    type: text
  - path: incident_data.opt_25
    type: text
  - path: incident_data.opt_26
    type: text
  - path: incident_data.opt_27
    type: text
  - path: incident_data.opt_28
    type: text
  - path: incident_data.opt_29
    type: text
  - path: incident_data.opt_30
    type: text
  - path: incident_data.opt_31
    type: text
  - path: incident_data.opt_32
    type: text
  - path: incident_data.opt_33
    type: text
  - path: incident_data.opt_34
    type: text
  - path: incident_data.opt_35
    type: text
  - path: incident_data.opt_36
    type: text
  - path: incident_data.opt_37
    type: text
  - path: incident_data.opt_38
    type: text
  - path: incident_data.opt_39
    type: text
  - path: incident_data.opt_40
    type: text
  - path: incident_data.opt_41
    type: text
  - path: incident_data.opt_42
    type: text
  - path: incident_data.opt_45
    type: text
  - path: incident_data.opt_44
    type: text
  - path: incident_data.opt_45
    type: text
  - path: incident_data.opt_46
    type: text
  - path: incident_data.opt_47
    type: text
  - path: incident_data.opt_48
    type: text
  - path: incident_data.opt_49
    type: text
  - path: incident_data.opt_50
    type: text
