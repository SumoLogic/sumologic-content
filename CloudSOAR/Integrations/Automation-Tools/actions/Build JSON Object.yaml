integration: 'Automation Tools'
name: 'Build JSON Object'
type: Custom
script:
 code: |

        import json
        import sys
        import argparse

        # Accept string or json inputs that will be packaged up into a single JSON result.
        
        def build_json(field_key: str, value: str):
            results_dict = {}
            field_key = str(field_key)
            value = str(value)
            try:
                raw = str(value).strip("'<>() ").replace('\'', '\"')
                value = json.loads(raw)
            except Exception as e:
                pass
            if isinstance(value, str) or isinstance(value, int):
                results_dict.update({field_key: value})
            elif isinstance(value, dict):
                if value.get(field_key, None):
                    if isinstance(value[field_key], list):
                        if isinstance(list(value.values())[0], list):
                            results_dict[field_key] = list(value.values())[0]
                else:
                    results_dict.update({field_key: value})
            elif field_key in value:
                if isinstance(value[field_key], list):
                    if isinstance(list(value.values())[0], list):
                        results_dict[field_key] = list(value.values())[0]
            elif type(value) not in [str, list, dict, int]:
                raise ValueError("Invalid value type \"{val_type}\"".format(val_type=type(value)))

            else:
                results_dict.update({field_key: value})
            return results_dict


        try:
            parser = argparse.ArgumentParser()
            parser.add_argument('--name', help='JSON Root Name', required=False)
            parser.add_argument('--key1', help='JSON Key Name 1', required=False)
            parser.add_argument('--val1', help='JSON Input 1', required=False)
            parser.add_argument('--key2', help='JSON Key Name 2', required=False)
            parser.add_argument('--val2', help='JSON Input 2', required=False)
            parser.add_argument('--key3', help='JSON Key Name 3', required=False)
            parser.add_argument('--val3', help='JSON Input 3', required=False)
            parser.add_argument('--key4', help='JSON Key Name 4', required=False)
            parser.add_argument('--val4', help='JSON Input 4', required=False)
            parser.add_argument('--key5', help='JSON Key Name 5', required=False)
            parser.add_argument('--val5', help='JSON Input 5', required=False)
            args, unknown = parser.parse_known_args()
            #print(args)
            #exit(0)

            json_dict = {}
            if args.val1 is not None:
                json_dict.update(build_json(args.key1, args.val1))
            if args.val2 is not None:
                json_dict.update(build_json(args.key2, args.val2))
            if args.val3 is not None:
                json_dict.update(build_json(args.key3, args.val3))
            if args.val4 is not None and args.key4 is not None:
                json_dict.update(build_json(args.key4, args.val4))
            if args.val5 is not None and args.key5 is not None:
                json_dict.update(build_json(args.key5, args.val5))
            print(json.dumps({"message": {str(args.name): json_dict}}))
            exit(0)
        except Exception as e:
            sys.stderr.write(str(e))
            exit(-1)

fields:
  - id: name
    label: 'JSON Root Name'
    incident_artifacts: true
    type: text
    required: false
    hint: 'Optional name to assign to the root JSON output.'
  - id: key1
    label: 'JSON Key Name 1'
    incident_artifacts: true
    type: text
    required: false
    hint: 'Key name for the selected JSON input.'
  - id: val1
    label: 'JSON Input 1'
    incident_artifacts: true
    type: text
    required: false
    hint: 'String, integer or json data input. Lists also accepted when nested within a dictionary (use "Generate JSON List" to capture lists).'
  - id: key2
    label: 'JSON Key Name 2'
    incident_artifacts: true
    type: text
    required: false
    hint: 'Key name for the selected JSON input.'
  - id: val2
    label: 'JSON Input 2'
    type: text
    incident_artifacts: true
    required: false
    hint: 'String, integer or json data input. Lists also accepted when nested within a dictionary (use "Generate JSON List" to capture lists).'
  - id: key3
    label: 'JSON Key Name 3'
    type: text
    required: false
    hint: 'Key name for the selected JSON input.'
  - id: val3
    label: 'JSON Input 3'
    type: text
    required: false
    hint: 'String, integer or json data input. Lists also accepted when nested within a dictionary (use "Generate JSON List" to capture lists).'
  - id: key4
    label: 'JSON Key Name 4'
    type: text
    required: false
    hint: 'Key name for the selected JSON input.'
  - id: val4
    label: 'JSON Input 4'
    type: text
    required: false
    hint: 'String, integer or json data input. Lists also accepted when nested within a dictionary (use "Generate JSON List" to capture lists).'
  - id: key5
    label: 'JSON Key Name 5'
    type: text
    required: false
    hint: 'Key name for the selected JSON input.'
  - id: val5
    label: 'JSON Input 5'
    type: text
    required: false
    hint: 'String, integer or json data input. Lists also accepted when nested within a dictionary (use "Generate JSON List" to capture lists).'
output:
  - path: 'message'
    type: text