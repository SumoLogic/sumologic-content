integration: 'Automation Tools'
name: 'Extract Domain from URL or Email'
type: Custom
script:
 code: |
    import json
    import sys
    import argparse
    import re
    import os

    class EnvDefault(argparse.Action):
        def __init__(self, required=True, default=None, **kwargs):
            envvar = kwargs.get("dest")
            default = os.environ.get(envvar, default) if envvar in os.environ else default
            required = False if required and default else required
            super(EnvDefault, self).__init__(default=default, required=required, **kwargs)

        def __call__(self, parser, namespace, values, option_string=None):
            setattr(namespace, self.dest, values)


    # A simple action to extract the domain from a URL or email address.
    try:
        parser = argparse.ArgumentParser()
        parser.add_argument('--input', help='URL Input', required=True, action=EnvDefault)
        args, unknown = parser.parse_known_args()
    
        result_dict = {"result":{}}
        
        try:
            url_stripped = args.input.strip("'")
            regex = re.search("https?:\/\/(?:www\.)?([-a-zA-Z0-9@:%._\+~#=]+\.[a-zA-Z0-9()]+)", args.input)
            if regex:
                result = regex.group(1)
            else: 
                regex = re.search("[^@]*@(.*)", args.input)
                if regex:
                    result = regex.group(1)
            result_dict["result"] = result
        except Exception as e:
            raise Exception("Unable to extract a domain from the provided URL or email address ('{0}')".format(args.input))
        
        print(json.dumps(result_dict))
        exit(0)
    except Exception as e:
        err = str(e)
        sys.stderr.write(err)
        exit(-1)
fields:
  - id: input
    label: 'URL or Email Address'
    incident_artifacts: true
    type: text
    required: true
    hint: 'URL or email address from which to extract the domain'
output:
  - path: 'result'
    type: text