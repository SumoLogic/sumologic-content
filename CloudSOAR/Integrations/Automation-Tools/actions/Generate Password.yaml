integration: 'Automation Tools'
name: 'Generate Password'
type: Custom
script:
 code: |
    import json
    import sys
    import argparse
    import string
    import random
    import os
    
    class EnvDefault(argparse.Action):
        def __init__(self, required=True, default=None, **kwargs):
            envvar = kwargs.get("dest")
            default = os.environ.get(envvar, default) if envvar in os.environ else default
            required = False if required and default else required
            super(EnvDefault, self).__init__(default=default, required=required, **kwargs)

        def __call__(self, parser, namespace, values, option_string=None):
            setattr(namespace, self.dest, values)


    try:
        parser = argparse.ArgumentParser()
        parser.add_argument('--length', help='Password Length, REQUIRED', required=True, action=EnvDefault)
        parser.add_argument('--bool_upper', help='Minimum Upper Case Characters', required=False, action=EnvDefault)
        parser.add_argument('--bool_number', help='Minimum Numbers', required=False, action=EnvDefault)
        parser.add_argument('--bool_special', help='Minimum Special Characters', required=False, action=EnvDefault)
        args, unknown = parser.parse_known_args()

        lowers = list(random.sample(string.ascii_lowercase, len(string.ascii_lowercase)))
        uppers = list(random.sample(string.ascii_uppercase, len(string.ascii_uppercase)))
        numbers = list(random.sample(string.digits, len(string.digits)))
        specials = list("!#$%&()*+, -./:;<=>?@[]^_{}~")
        random.shuffle(specials)
        result = []
        
        while len(result) < int(args.length):
        
            for x in range(int(int(args.length) * 0.3)):
                result.append(random.sample(lowers, len(lowers))[x])
                if args.bool_upper.lower() == "true" or args.bool_upper == "1":
                    result.append(random.sample(uppers, len(uppers))[x])
                else:
                    result.append(random.sample(lowers, len(lowers))[x])
    
            if args.bool_number.lower() == "true" or args.bool_number == "1":
                for x in range(int(int(args.length) * 0.2)):
                    result.append(random.sample(numbers, len(numbers))[x])
                    
            if args.bool_special.lower() == "true" or args.bool_special == "1":
                for x in range(int(int(args.length) * 0.2)):
                    result.append(random.sample(specials, len(specials))[x])
        
        random.shuffle(result)
        
        # ¯\_(ツ)_/¯
        while len(result) > int(args.length):
            del result[-1]
        
        json_dict = {
            'password': "".join(result)
        }
        
        print(json.dumps(json_dict))
        exit(0)
    except Exception as e:
        err = str(e)
        sys.stderr.write(str(traceback.print_exc(file=sys.stdout)))
        exit(-1)
fields:
  - id: length
    label: 'Length'
    type: text
    required: true
    hint: 'Password Length'
  - id: bool_upper
    label: 'Uppercase Characters'
    type: checkbox
    required: false
    hint: 'Include at least 1 uppercase character in the password'
  - id: bool_number
    label: 'Numbers'
    type: checkbox
    required: false
    hint: 'Include at least 1 number in the password'
  - id: bool_special
    label: 'Special Characters'
    type: checkbox
    required: false
    hint: 'Include at least 1 special character in the password'
output:
  - path: 'password'
    type: text