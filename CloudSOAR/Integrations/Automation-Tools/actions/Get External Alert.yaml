integration: 'Automation Tools'
name: 'Get External Alert'
type: Enrichment
script:
    code: |
        import json
        import argparse
        import requests
        import sys
        import urllib3
        import os
        
        # disabling all urllib3 warnings.
        urllib3.disable_warnings()

        class EnvDefault(argparse.Action):
            def __init__(self, required=True, default=None, **kwargs):
                envvar = kwargs.get("dest")
                default = os.environ.get(envvar, default) if envvar in os.environ else default
                required = False if required and default else required
                super(EnvDefault, self).__init__(default=default, required=required, **kwargs)

            def __call__(self, parser, namespace, values, option_string=None):
                setattr(namespace, self.dest, values)
        
        try:
            parser = argparse.ArgumentParser()
            parser.add_argument('--token', help='API token (legacy)', required=False, action=EnvDefault)
            parser.add_argument('--access_id', help='Access ID', required=False, action=EnvDefault)
            parser.add_argument('--access_key', help='Access Key', required=False, action=EnvDefault)
            parser.add_argument('--cloud_soar_url', help='Cloud SOAR URL , REQUIRED', required=True, action=EnvDefault)
            parser.add_argument('--incidentId', help='Incident Id', required=False, action=EnvDefault)
            parser.add_argument('--IncmanParamIncidentId', help='Incident ID', required=False, action=EnvDefault)
        
            args, unknown = parser.parse_known_args()
        
            # Get the incident id, if empty current incident id will be used
            incidentID = args.IncmanParamIncidentId
            if args.incidentId is not None and args.incidentId != '':
                incidentID = args.incidentId
            if incidentID is None or incidentID == '' or int(incidentID) <= 0:
                raise Exception('Please specify a valid Cloud SOAR Incident ID')
        
            # delivery 2 endpoint & headers
            if args.access_id and args.access_key:
                api_path = "/api/csoar/v3"
                headers = {
                  'Content-Type': 'application/json',
                  'Accept': 'application/json'
                }
            # legacy endpoint & headers
            elif args.token:
                api_path = "/api/v3"
                headers = {
                  'Accept': 'application/json;charset=UTF-8',
                  'Content-Type': 'application/x-www-form-urlencoded',
                  'Authorization': 'Bearer {}'.format(args.token)
                }
            else:
                raise Exception("Access ID and Access Key, or legacy API token are required for authentication")

            session = requests.Session()
            session.verify = False
            
            # fetch list of external alerts
            get_ext_alert_list = '{0}{1}/incidents/{2}/external_alerts/'.format(args.cloud_soar_url.rstrip('/'), api_path, incidentID)
            response = session.get(get_ext_alert_list, headers=headers, auth=(args.access_id, args.access_key) if args.access_id and args.access_key else None, timeout=15)
            response.raise_for_status()
            alert_res = response.json()
            alert_id = alert_res[0]["id"]
            alert_type = alert_res[0]["type"]
        
            # fetch external alert(s) details
            get_ext_alert = '{0}{1}/incidents/{2}/external_alerts/{3}/?type={4}'.format(args.cloud_soar_url.rstrip('/'), api_path, incidentID, alert_id, alert_type)
            response = session.get(get_ext_alert, headers=headers, auth=(args.access_id, args.access_key) if args.access_id and args.access_key else None, timeout=15)
            res = response.json()
        
            print(json.dumps(res))
            exit(0)
        
        except Exception as e:
            err = str(e)
            try:
                if hasattr(e, "response"):
                    try:
                        response = e.response.json()
                        msg_error = response.get("error", None)
                        if msg_error is not None:
                            msg_description = response.get("description", "")
                            err = "API Error: {} {} ".format(str(msg_error), str(msg_description))
                    except ValueError:
                        err = str(e)
            except AttributeError:
                err = str(e)
            sys.stderr.write(str(err))
            exit(-1)

fields:
  - id: incidentId
    label: 'Incident ID'
    type: text
    required: false
    hint: "Incident ID (if empty the current incident ID will be used)"
    validator: integer
output:
    - path: '[].id.name'
      type: string
    - path: '[].id.value'
      type: string
    - path: '[].value.name'
      type: string
    - path: '[].value.value'
      type: string
    - path: '[].type.name'
      type: string
    - path: '[].type.value'
      type: string
    - path: '[].additional_info.name'
      type: string
    - path: '[].additional_info.value'
      type: string
    - path: '[].incident.name'
      type: string
    - path: '[].incident.value'
      type: string
    - path: '[].sha256_hash.name'
      type: string
    - path: '[].sha256_hash.value'
      type: string
    - path: '[].md5_hash.name'
      type: string
    - path: '[].md5_hash.value'
      type: string
    - path: '[].sha1_hash.name'
      type: string
    - path: '[].sha1_hash.value'
      type: string