integration: 'Automation Tools'
name: 'Data Transform'
type: Custom
script:
 code: |
    import json
    import sys
    import argparse
    import traceback
    import re
    import ipaddress
    import os
    import re
    
    class EnvDefault(argparse.Action):
        def __init__(self, required=True, default=None, **kwargs):
            envvar = kwargs.get("dest")
            default = os.environ.get(envvar, default) if envvar in os.environ else default
            required = False if required and default else required
            super(EnvDefault, self).__init__(default=default, required=required, **kwargs)

        def __call__(self, parser, namespace, values, option_string=None):
            setattr(namespace, self.dest, values)


    try:
        parser = argparse.ArgumentParser()
        parser.add_argument('--input', help='String Input', required=True, action=EnvDefault)
        parser.add_argument('--func', help='Transform Function', required=True, action=EnvDefault)
        parser.add_argument('--param', help='Transform Argument', required=False, action=EnvDefault)
        parser.add_argument('--array_p', help='Array Element', required=False, action=EnvDefault)
        parser.add_argument('--repsuff', help='Replace/Suffix Argument', required=False, action=EnvDefault)
        args, unknown = parser.parse_known_args()
    
        result_dict = {"result":{}}
        
        # Split Function
        if args.func == "split":
            if args.param is None:
                args.param = ","
            result = args.input.split(args.param)
            if args.array_p:
                try:
                    result = result[int(args.array_p)]
                except Exception as e:
                    raise Exception("{0} is not an integer. Expecting the object position in the array: '{1}'".format(args.array_p, e))
        
        # Strip Function        
        elif args.func in ["strip", "lstrip", "rstrip"]:
            if args.func == "strip":
                if args.param:
                    result = args.input.strip(args.param)
                else:
                    result = args.input.strip()
            if args.func == "lstrip":
                if args.param:
                    result = args.input.lstrip(args.param)
                else:
                    result = args.input.lstrip()
            if args.func == "rstrip":
                if args.param:
                    result = args.input.rstrip(args.param)
                else:
                    result = args.input.rstrip()
            
        # Regex Search Function
        elif args.func == "regex":
            if args.param is None:
                raise Exception("Missing 'Transform Argument'. Please specify a regex pattern.")
            if re.search(args.param, args.input):
                try:
                    regex = re.search(args.param, args.input)
                except:
                    raise Exception("'{0}' is not a valid regular expression: '{1}'".format(args.param, e))
                try:
                    # return single capture group
                    if args.array_p:
                        result = regex.group(args.array_p)
                    # return full match
                    else:
                        result = regex.group()
                except Exception as e:
                    raise Exception("Invalid regular expression or capture group: '{0}'".format(e))
            else:
                result = None
        
        # String Append/Prepend Function
        elif args.func == "prefix_suffix":
            if (args.param is None or args.param == '') and (args.repsuff is None or args.repsuff == ''):
                raise Exception("Missing 'Transform' and 'Replace/Suffix' Argument. Please specify a value to add to the string.")
            if args.param and (args.repsuff is None or args.repsuff == ''):
                result = "{0}{1}".format(args.param, args.input)
            elif args.repsuff and (args.param is None or args.param == ''):
                 result = "{0}{1}".format(args.input,args.repsuff)
            elif args.repsuff and args.param:
                result = "{0}{1}{2}".format(args.param,args.input,args.repsuff)
            else:
                result = None
        
        # String Replace Function
        elif args.func == "replace":
            if args.param is None:
                raise Exception("Missing 'Transform Argument'. Please specify the values that will replace the input.")
            if args.repsuff is None:
                replacement = ''
            else:
                replacement = args.repsuff
            result = args.input.replace(args.param, replacement)
                
        # String Regex Replace Function
        elif args.func == "regex_replace":
            if args.param is None:
                raise Exception("Missing 'Transform Argument'. Please specify the values that will replace the input.")
            
            # Splitting args.param into pattern and replacement
            if args.repsuff is None:
                replacement = ''
            else:
                replacement = args.repsuff

            # Compiling the regular expression pattern
            regex_pattern = re.compile(args.param)
            
            # Performing the replacement
            result = regex_pattern.sub(replacement, args.input)
            
        
        # Upper/Lower/Title/Capitalize Functions
        elif args.func in ["upper", "lower", "title", "capitalize"]:
            if isinstance(args.input, str):
                if args.func == "upper":
                    result = args.input.upper()
                if args.func == "lower":
                    result = args.input.lower()
                if args.func == "title":
                    result = args.input.title()
                if args.func == "capitalize":
                    result = args.input.capitalize()
            else:
                raise Exception("Invalid input type. Only string inputs are supported.")
        
        # Count Function
        elif args.func == "count":
            result = args.input.count(args.param)
        
        # Encode UTF-8 Function
        elif args.func == "encode_utf8":
            if args.param:
                result = args.input.encode(encoding="utf8", errors=args.param)
            else:
                result = args.input.encode(encoding="utf8")
        
        # Encode ASCII Function
        elif args.func == "encode_ascii":
            if args.param:
                result = args.input.encode(encoding="ascii",errors=args.param)
            else:
                result = args.input.encode(encoding="ascii")
        
        # Escape String Function
        elif args.func == "escape_string":
            special_characters = ['\\', '\b', '\f', '\n', '\r', '\t']
            escaped_str = args.input
    
            try:
                for char in special_characters:
                    escaped_str = escaped_str.replace(char, '\\' + char)
                result = escaped_str
    
            except Exception as e:
                print(f"An error occurred: {e}")
                escaped_str = input_str  # Reset the escaped_str to the original input in case of an exception
            
        else:
            raise Exception("Please enter a valid transformation function")
        
        result_dict["result"] = result
        print(json.dumps(result_dict))
        exit(0)
    except Exception as e:
        sys.stderr.write(str(e))
        exit(-1)
fields:
  - id: input
    label: 'String Input'
    incident_artifacts: true
    type: text
    required: true
  - id: func
    label: 'Transform Function'
    type: list
    required: true
    values:
      split: Split
      strip: Strip
      lstrip: Left Strip
      rstrip: Right Strip
      replace: Replace
      regex_replace: Regex Replace
      prefix_suffix: Prefix and/or Suffix
      regex: Regex Search
      upper: Uppercase
      lower: Lowercase
      title: Title Case
      capitalize: Capitalize
      encode_utf8: Encode UTF8
      encode_ascii: Encode ASCII
      escape_string: Escape String
    default: split
    hint: "The type of data transform to execute"
  - id: param
    label: 'Transform Argument'
    type: text
    required: false
    hint: "Function input - e.g. regex pattern (capture groups supported), replace argument (a,b), delimiter to split a string, value to prepend/append. For the 'Prefix and Suffix' function use this for the Prefix value."
  - id: array_p
    label: 'Array Element'
    type: number
    required: false
    hint: "Optional: if using 'split' or 'regex' functions, select the array element or capture group to return. Otherwise returns the entire result."
  - id: repsuff
    label: 'Replace/Suffix Argument'
    type: text
    required: false
    hint: "Optional: If using 'replace' function, select the value you want to replace with, Otherwise replace value is blank. If using the 'Prefix and Suffix' function, select the value you want to Suffix with. Otherwise Suffix value is blank."
output:
  - path: 'result'
    type: text