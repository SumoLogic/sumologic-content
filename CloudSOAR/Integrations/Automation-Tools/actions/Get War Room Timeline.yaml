integration: 'Automation Tools'
name: 'Get War Room Timeline'
type: Enrichment
script:
    code: |
        import json
        import argparse
        import requests
        import sys
        import urllib3
        import html
        import unicodedata
        from datetime import datetime, timedelta
        
        urllib3.disable_warnings(urllib3.exceptions.InsecurePlatformWarning)
        urllib3.disable_warnings(urllib3.exceptions.SNIMissingWarning)
        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
        
        # fetches timeline of an incident in JSON format (audit data).
        
        try:
            parser = argparse.ArgumentParser()
            parser.add_argument('--token', help='JWT token , REQUIRED', required=True)
            parser.add_argument('--cloud_soar_url', help='Cloud SOAR URL , REQUIRED', required=True)
            parser.add_argument('--incidentId', help='Incident ID', required=False)
            parser.add_argument('--IncmanParamIncidentId', help='Incident ID', required=False)
        
            args, unknown = parser.parse_known_args()

            # Get the incident id, if empty current incident id will be used
            incidentID = args.IncmanParamIncidentId
            if args.incidentId is not None and args.incidentId != '':
                incidentID = args.incidentId
            if incidentID is None or incidentID == '' or int(incidentID) <= 0:
                raise Exception('Invalid IncMan incident id')
        
            timeline_dict = {
                'incident_id': int(incidentID),
                'timeline': [] 
            }
            
            api_url = args.cloud_soar_url.rstrip('/')
            headers = {
                'Authorization': 'Bearer {}'.format(args.token),
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            }
            session = requests.Session()
            session.verify = False

            timeline_url = '{0}/api/v3/incidents/{1}/timeline/'.format(api_url, incidentID)
            result = session.get(timeline_url, headers=headers, timeout=15)
            response = result.json()
            for x in range(0,len(response)):
                timeline_item = {}
                timeline_item['id'] = response[x].get('id')
                timeline_item['starttime'] = str(datetime.fromtimestamp(response[x].get('starttime').get('value')))
                timeline_item['endtime'] = int(response[x].get('endtime').get('value'))
                timeline_item['category'] = response[x].get('category').get('value')
                timeline_item['title'] = response[x].get('title').get('value')
                timeline_item['additional_info'] = response[x].get('additional_info').get('value')
                timeline_item['created_by'] = response[x].get('created_by').get('value')
                timeline_item['is_locked'] = response[x].get('is_locked').get('value')
                timeline_item['is_printed'] = response[x].get('is_printed').get('value')
                timeline_item['is_deleted'] = response[x].get('is_deleted').get('value')
                timeline_dict['timeline'].append(timeline_item)
            print(json.dumps(timeline_dict))
            exit(0)
        
        except Exception as e:
            err = str(e)
            try:
                if hasattr(e, "response"):
                    try:
                        response = e.response.json()
                        msg_error = response.get("error", None)
                        if msg_error is not None:
                            msg_description = response.get("description", "")
                            err = "IncMan API Error: {} {} ".format(str(msg_error), str(msg_description))
                    except ValueError:
                        err = str(e)
            except AttributeError:
                err = str(e)
            sys.stderr.write(str(err))
            exit(-1)

fields:
  - id: incidentId
    label: 'Incident ID'
    type: text
    required: false
    hint: "Incident ID (if empty the current incident ID will be used)"
    validator: integer
output:
    - path: 'incident_id'
      type: integer
    - path: 'timeline.[].id'
      type: integer
      example: '3'
    - path: 'timeline.[].starttime'
      type: string
    - path: 'timeline.[].endtime'
      type: string
    - path: 'timeline.[].category'
      type: string
    - path: 'timeline.[].title'
      type: string
      example: "test"
    - path: 'timeline.[].additional_info'
      type: string
    - path: 'timeline.[].created_by'
      type: string
    - path: 'timeline.[].is_locked'
      type: string
    - path: 'timeline.[].is_printed'
      type: string
    - path: 'timeline.[].is_deleted'
      type: string
table_view:
    - display_name: Title
      value: 'timeline.[].title'
    - display_name: Timeline ID
      value: 'timeline.[].id'
    - display_name: Created By
      value: 'timeline.[].created_by'
    - display_name: Start Time
      value: 'timeline.[].starttime'

