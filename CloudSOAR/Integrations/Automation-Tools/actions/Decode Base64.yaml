integration: 'Automation Tools'
name: 'Decode Base64'
type: Custom
script:
    code: |
        import sys
        import argparse
        import base64
        import json
        import os
            
        class EnvDefault(argparse.Action):
            def __init__(self, required=True, default=None, **kwargs):
                envvar = kwargs.get("dest")
                default = os.environ.get(envvar, default) if envvar in os.environ else default
                required = False if required and default else required
                super(EnvDefault, self).__init__(default=default, required=required, **kwargs)
        
            def __call__(self, parser, namespace, values, option_string=None):
                setattr(namespace, self.dest, values)

              
        try:
            parser = argparse.ArgumentParser()
            parser.add_argument('--base64', help='File Content, REQUIRED', required=True, action=EnvDefault)
            parser.add_argument('--base64_key', help='JSON Key, REQUIRED', required=True, action=EnvDefault)
            parser.add_argument('--utf_bool', help='Enabled UTF-8 Encoding', required=False, action=EnvDefault)
            
            args, unknown = parser.parse_known_args()
            
            try:
            
                with open(args.base64, "r") as file:
                    raw = json.load(file)
                    
                    json_msg = raw.get("message", {})
                    if len(json_msg) > 0 and json_msg is not None:
                        json_data = json_msg
                    else:
                        raise Exception('Unable to extract encoded data. Please validate the JSON input.')
                    base64_unicode = json_data[args.base64_key]
                    
                    if args.utf_bool == "true" or args.utf_bool == "1":
                        base64_unicode = str(base64_unicode,'utf-8')
                decoded = base64.b64decode(base64_unicode)
                
            except ValueError as e:
                raise Exception("Invalid JSON input ({0})".format(str(e)))
            
            resJson = {}
            resJson['content'] = decoded
            print(json.dumps(resJson))
            exit(0)
        
        except Exception as e:
            err = str(e)
            sys.stderr.write(str(e))
            exit(-1)
fields:
  - id: base64
    label: 'File Content'
    type: upload
    required: true
    hint: 'Use "output.raw" from a previous action that has a base64-encoded string as a JSON element.'
  - id: base64_key
    label: 'JSON Key'
    type: text
    required: true
    hint: 'This should be set to the JSON key/value that contains a base64-encoded string'
  - id: utf_bool
    label: 'Enable UTF-8 Encoding'
    type: checkbox
    required: false
    hint: 'If errors are encountered, selecting this option will try passing the base64 content as a UTF-8 encoded string.'
output:
    - path: 'content'
      type: string
src_doc: 'content'