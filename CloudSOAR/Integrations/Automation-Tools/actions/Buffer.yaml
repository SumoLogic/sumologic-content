integration: 'Automation Tools'
name: 'Buffer'
type: Custom
script:
 code: |
    import json
    import sys
    import argparse
    import os
    
    class EnvDefault(argparse.Action):
    def __init__(self, required=True, default=None, **kwargs):
        envvar = kwargs.get("dest")
        default = os.environ.get(envvar, default) if envvar in os.environ else default
        required = False if required and default else required
        super(EnvDefault, self).__init__(default=default, required=required, **kwargs)

    def __call__(self, parser, namespace, values, option_string=None):
        setattr(namespace, self.dest, values)


    try:
        parser = argparse.ArgumentParser()
        parser.add_argument('--input', help='JSON', required=True, action=EnvDefault)
        args, unknown = parser.parse_known_args()
    
        json_dict = {"data":{}}
        try:
            din = str(args.input).strip("'<>() ").replace('\'', '\"')
            json_dict["data"] = json.loads(din)
            
        except Exception as e:
            pass
            if  type(args.input) is str:
                json_dict["data"] = args.input
        
        print(json.dumps(json_dict))
        exit(0)
    except Exception as e:
        err = str(e)
        sys.stderr.write(err)
        exit(-1)
fields:
  - id: input
    label: 'JSON or String Input'
    incident_artifacts: true
    type: text
    required: true
    hint: 'Accepts valid JSON or string input and returns in JSON format.'
output:
  - path: 'data'
    type: text