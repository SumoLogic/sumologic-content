integration: 'Automation Tools'
name: 'Check Time Boundaries'
type: Custom
script:
 code: |
    import json
    import sys
    import time
    from datetime import datetime, time
    import pytz
    import argparse
    import os
    
    class EnvDefault(argparse.Action):
        def __init__(self, required=True, default=None, **kwargs):
            envvar = kwargs.get("dest")
            default = os.environ.get(envvar, default) if envvar in os.environ else default
            required = False if required and default else required
            super(EnvDefault, self).__init__(default=default, required=required, **kwargs)

        def __call__(self, parser, namespace, values, option_string=None):
            setattr(namespace, self.dest, values)

    try:
        parser = argparse.ArgumentParser()
        parser.add_argument('--time_start', help='Start Boundary (24hr), REQUIRED', required=True, action=EnvDefault)
        parser.add_argument('--time_end', help='End Boundary (24hr), REQUIRED', required=True, action=EnvDefault)
        parser.add_argument('--weekdays', help='Evaluate Weekday', required=False, action=EnvDefault)
        args, unknown = parser.parse_known_args()
    
        json_dict = {}
        now = datetime.now(pytz.timezone("America/New_York"))
        if args.weekdays == "True" or args.weekdays == "true":
            if 0 <= now.weekday() <= 4:
                if time(int(args.time_start)) <= now.time() <= time(int(args.time_end)):
                    out_of_bounds = "false"
        elif time(int(args.time_start)) <= now.time() <= time(int(args.time_end)):
                    out_of_bounds = "false"
        else:
            out_of_bounds = "true"

        json_dict['time_current'] = str(now)
        json_dict['time_weekday'] = str(now.weekday())
        json_dict['boundary_start'] = str(time(int(args.time_start)))
        json_dict['boundary_end'] = str(time(int(args.time_end)))
        json_dict['outside_working_hours'] = out_of_bounds
        
        print(json.dumps(json_dict))
        exit(0)
    except Exception as e:
        err = str(e)
        sys.stderr.write(str(e))
        exit(-1)
fields:
  - id: time_start
    label: 'Start Boundary (24hr)'
    type: text
    required: true
    hint: 'The starting hour of business hours (24hr format)(ex. "8").'
  - id: time_end
    label: 'End Boundary (24hr)'
    type: text
    required: true
    hint: 'The final hour of business hours (24hr format)(ex. "17").'
  - id: weekdays
    label: 'Evaluate Day of the Week'
    type: checkbox
    required: false
    hint: 'Enable if the weekend should be excluded from business hours.'

output:
  - path: 'time_current'
    type: text
  - path: 'time_weekday'
    type: text
  - path: 'boundary_start'
    type: text
  - path: 'boundary_end'
    type: text
  - path: 'outside_working_hours'
    type: string
