integration: 'Automation Tools'
name: 'Offset Human Readable Timestamp'
type: Custom
script:
 code: |
    import json
    import sys
    import time
    from datetime import datetime
    import argparse
    import os

    class EnvDefault(argparse.Action):
            def __init__(self, required=True, default=None, **kwargs):
                envvar = kwargs.get("dest")
                default = os.environ.get(envvar, default) if envvar in os.environ else default
                required = False if required and default else required
                super(EnvDefault, self).__init__(default=default, required=required, **kwargs)

            def __call__(self, parser, namespace, values, option_string=None):
                setattr(namespace, self.dest, values)
    def determine_and_format_timestamp(timestamp):
        formats = [
        "%Y-%m-%dT%H:%M:%S%z",
        "%Y %b %d %H:%M:%S.%f %Z",
        "%Y-%m-%dT%H:%M:%S.%f%z",
        "%Y-%m-%dT%H:%M:%S.%fZ",
        "%b %d %H:%M:%S %Z %Y",
        "%d/%b/%Y:%H:%M:%S %Z",
        "%b %d, %Y %I:%M:%S %p",
        "%b %d %Y %H:%M:%S",
        "%b %d %H:%M:%S %Y",
        "%b %d %H:%M:%S %Z",
        "%b %d %H:%M:%S",
        "%Y-%m-%dT%H:%M:%S%z",
        "%Y-%m-%dT%H:%M:%SZ",
        "%Y-%m-%d %H:%M:%S %Z",
        "%Y-%m-%d %H:%M:%S%z",
        "%Y-%m-%d %H:%M:%S,%f",
        "%Y/%m/%d*H:%M:%S",
        "%Y %b %d %H:%M:%S.%f*%Z",
        "%Y %b %d %H:%M:%S.%f",
        "%Y-%m-%d %H:%M:%S,%f%Z",
        "%Y-%m-%d %H:%M:%S.%f",
        "%Y-%m-%dT%H:%M:%S.%f",
        "%Y-%m-%dT%H:%M:%S",
        "%Y-%m-%dT%H:%M:%SZ",
        "%Y-%m-%dT%H:%M:%S.%f",
        "%Y-%m-%dT%H:%M:%S",
        "%Y-%m-%d*H:%M:%S:%f",
        "%Y-%m-%d*H:%M:%S",
        "%y-%m-%d %H:%M:%S,%f %Z",
        "%y-%m-%d %H:%M:%S,%f",
        "%y-%m-%d %H:%M:%S %Z",
        "%y-%m-%d %H:%M:%S",
        "%y/%m/%d %H:%M:%S",
        "%y%m%d %H:%M:%S",
        "%Y%m%d %H:%M:%S.%f",
        "%m/%d/%y*H:%M:%S",
        "%m/%d/%Y*H:%M:%S",
        "%m/%d/%Y*H:%M:%S*%f",
        "%m/%d/%y %H:%M:%S %Z",
        "%m/%d/%Y %H:%M:%S %Z",
        "%H:%M:%S",
        "%H:%M:%S.%f",
        "%H:%M:%S,%f",
        "%d/%b %H:%M:%S,%f",
        "%d/%b/%Y:%H:%M:%S,%f",
        "%d/%b/%Y %H:%M:%S",
        "%d-%b-%Y %H:%M:%S",
        "%d %b %Y %H:%M:%S",
        "%d %b %Y %H:%M:%S.%f",
        "%m%d_%H:%M:%S",
        "%m%d_%H:%M:%S.%f",
        "%m/%d/%Y %I:%M:%S %p"
    ]
    
        for date_format in formats:
            try:
                # Try parsing the timestamp with the current format
                dt_object = datetime.strptime(timestamp, date_format)
    
                # Return the formatted timestamp and format type if successful
                return dt_object.strftime(date_format), date_format
            except ValueError:
                pass
    
        # If none of the formats match, raise an exception or return a default value
        raise ValueError("Invalid timestamp format")

    # Given timestamp
    
    
    def main():
        try:
            json_dict = {}
            parser = argparse.ArgumentParser()
            parser.add_argument('--time_unix', help='Timestamp Input', required=False, action=EnvDefault)
            parser.add_argument('--time_offset', help='Timestamp Offset', required=False, action=EnvDefault)
            parser.add_argument('--offset_direction', help='Offset Direction', required=False, action=EnvDefault)
            args, unknown = parser.parse_known_args()
            json_dict = {}
            # Get Unix timestamp from the user
            input_timestamp = args.time_unix
            formatted_timestamp, timestamp_format = determine_and_format_timestamp(input_timestamp)
            unix_timestamp = datetime.strptime(args.time_unix, timestamp_format)
            unix_timestamp_ms = int(unix_timestamp.timestamp() * 1000)

            # Get offset value from the user in minutes
            offset_minutes = args.time_offset
            
            # Get offset direction from the user
            offset_direction = args.offset_direction

            # Calculate the offset timestamp
            if offset_direction == 'future':

                offset_result = int(unix_timestamp_ms) + (int(offset_minutes) * 60 * 1000)
                unix_timestamp_seconds = offset_result / 1000
                datetime_obj = datetime.utcfromtimestamp(unix_timestamp_seconds)
                formatted_offset_timestamp = datetime_obj.strftime("%Y-%m-%dT%H:%M:%S.%f")[:-3]  # Trim microseconds to milliseconds
                
            elif offset_direction == 'past':
            
                offset_result = int(unix_timestamp_ms) - (int(offset_minutes) * 60 * 1000)
                unix_timestamp_seconds = offset_result / 1000
                datetime_obj = datetime.utcfromtimestamp(unix_timestamp_seconds)
                formatted_offset_timestamp = datetime_obj.strftime("%Y-%m-%dT%H:%M:%S.%f")[:-3]  # Trim microseconds to milliseconds
            else:
                print(f"Error: Please enter a valid choice.")

            # Prepare JSON object
            json_dict['original_timestamp'] = str(unix_timestamp)
            json_dict['offset_timestamp'] = str(formatted_offset_timestamp)
            json_dict['offset_minutes'] = str(offset_minutes)
            json_dict['offset_directions'] = str(offset_direction)
            json_dict['timestamp_format'] = str(timestamp_format)
            
            print(json.dumps(json_dict))
            exit(0)
            
        except ValueError as e:
            err = str(e)
            sys.stderr.write(str(e))
            exit(-1)

    if __name__ == "__main__":
        main()
fields:
- id: time_unix
  label: 'Timestamp Unix Input'
  type: text
  required: true
  hint: 'This field represents the input for the original timestamp in human readable format'
- id: time_offset
  label: 'Offset In Minutes'
  type: text
  required: true
  hint: 'This field represents the number of minutes you would like to off-set the timestamp by'
- id: offset_direction
  label: 'Offset Direction'
  type: list
  required: false
  values:
    'future': 'future'
    'past': 'past'
  hint: 'This field represents the offset direction you would like to offset the time either into the future or into the past'
output:
  - path: original_timestamp
    type: text
    example: '2023-10-09 02:09:07.369000'
  - path: offset_timestamp
    type: text
    example: '2023-10-09T01:54:07.369'
  - path: offset_minutes
    type: text
    example: '15'
  - path: offset_directions
    type: text
    example: 'past'