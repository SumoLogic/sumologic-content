integration: 'Automation Tools'
name: 'Add Entity Metadata'
type: Notification
script:
    code: |
        import json
        import argparse
        import requests
        import sys
        import os
        import urllib3
        import html
        import unicodedata  
        from bs4 import BeautifulSoup
        
        # disabling all urllib3 warnings.
        urllib3.disable_warnings()

        class EnvDefault(argparse.Action):
            def __init__(self, required=True, default=None, **kwargs):
                envvar = kwargs.get("dest")
                default = os.environ.get(envvar, default) if envvar in os.environ else default
                required = False if required and default else required
                super(EnvDefault, self).__init__(default=default, required=required, **kwargs)

            def __call__(self, parser, namespace, values, option_string=None):
                setattr(namespace, self.dest, values)
        
        # adds tags or descriptions to an entity
        try:
            parser = argparse.ArgumentParser()
            parser.add_argument('--token', help='API token (legacy)', required=False, action=EnvDefault)
            parser.add_argument('--access_id', help='Access ID', required=False, action=EnvDefault)
            parser.add_argument('--access_key', help='Access Key', required=False, action=EnvDefault)
            parser.add_argument('--cloud_soar_url', help='Cloud SOAR URL , REQUIRED', required=True, action=EnvDefault)
            parser.add_argument('--entity', help='Entity', required=True, action=EnvDefault)
            parser.add_argument('--tag', help='Entity Tag', required=False, action=EnvDefault)
            parser.add_argument('--detail', help='Entity Additional Info', required=False, action=EnvDefault)
        
            args, unknown = parser.parse_known_args()
        
            # delivery 2 endpoint & headers
            if args.access_id and args.access_key:
                api_path = "/api/csoar/v3"
                headers = {
                  'Content-Type': 'application/json',
                  'Accept': 'application/json'
                }
            # legacy endpoint & headers
            elif args.token:
                api_path = "/api/v3"
                headers = {
                  'Accept': 'application/json;charset=UTF-8',
                  'Content-Type': 'application/x-www-form-urlencoded',
                  'Authorization': 'Bearer {}'.format(args.token)
                }
            else:
                raise Exception("Access ID and Access Key, or legacy API token are required for authentication")

            session = requests.Session()
            session.verify = False

            # Search For Entity and Extract ID
            search_payload = {
                "page_number": 1,
                "page_size": 150,
                "filter": 'value:"{0}"'.format(args.entity)
            }

            search_url = '{0}{1}/entities/search/'.format(args.cloud_soar_url.rstrip('/'), api_path)

            search_res = session.post(search_url, headers=headers, auth=(args.access_id, args.access_key) if args.access_id and args.access_key else None, timeout=15, data=json.dumps(search_payload))
            entity_id = search_res.json()
            entity_id = entity_id[0]["id"]
            
            detail_note = html.unescape(str(args.detail).strip())
            detail_note = unicodedata.normalize("NFKD", detail_note).encode("utf-8").decode("utf-8")
            detail_note = BeautifulSoup(detail_note, "html.parser").text
            detail_note = detail_note.replace('\u200b', '')
            
            detail_payload = {}
            if args.tag:
                detail_payload["tag"] = args.tag
            if args.detail:
                detail_payload["additional_info"] = detail_note

            detail_url = '{0}{1}/entities/{2}/'.format(args.cloud_soar_url.rstrip('/'), api_path, entity_id)
            detail_res = session.patch(detail_url, headers=headers, auth=(args.access_id, args.access_key) if args.access_id and args.access_key else None, timeout=15, data=json.dumps(detail_payload))
            response = detail_res.json()
            response["result"] = detail_payload
            print(json.dumps(response))
            exit(0)
        
        except Exception as e:
            err = str(e)
            try:
                if hasattr(e, "response"):
                    try:
                        response = e.response.json()
                        msg_error = response.get("error", None)
                        if msg_error is not None:
                            msg_description = response.get("description", "")
                            err = "API Error: {} {} ".format(str(msg_error), str(msg_description))
                    except ValueError:
                        err = str(e)
            except AttributeError:
                err = str(e)
            sys.stderr.write(str(err))
            exit(-1)

fields:
  - id: entity
    label: 'Entity'
    type: text
    required: true
    incident_artifacts: true
    hint: "The entity to add a tag or a description to"
  - id: tag
    label: 'Tag'
    type: text
    required: false
    hint: "The tag to add to the entity."
  - id: detail
    label: 'Additional Info'
    type: textarea
    required: false
    hint: "Description to add to the entity's details."
output:
    - path: 'detail'
      type: string
    - path: 'result.tag'
      type: string
    - path: 'result.additional_info'
      type: string
